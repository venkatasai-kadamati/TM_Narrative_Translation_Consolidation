# working half way : float isssue resolved only conclusion is mising
import os
import pandas as pd
import numpy as np
from natsort import natsorted
import docx
from docx.shared import Inches

# Clear environment (not applicable in Python)

# Specify location of the tuning tracker
fp = r"C:/Users/KadamatiV/OneDrive - Crowe LLP/Documents/PROJECTHUB/TM TUNING/TM_Narrative_Codebase_Consolidation/"
file_name = "BTL Tuning Tracker - With Calculations.xlsx"

# Specify how to format the different parameters seen (change threshold names as needed)
currencyF = [
    "Minimal Sum",
    "Minimum Value",
    "Minimal Transaction Amount",
    "Sum Lower Bound",
    "Minimal Current Month Sum",
    "Minimal Transaction Value",
    "Transaction Amount Lower Bound",
    "Sum Amount Lower Bound",
]
numberF = ["No. of Occurrences", "Minimum Volume", "Min Value"]
percentF = ["Ratio Lower Bound", "Ratio Upper Bound"]
decimalF = [
    "STDEV exceeds Historical Average Sum",
    "STDEV exceeds Historical Average Count",
]

# Data is loaded
data = pd.read_excel(os.path.join(fp, file_name), sheet_name=0)

# Enter the column name of the Rule IDs, if different
ruleIDs = data["Rule ID"].value_counts().index.tolist()

# Create lookup for values below 10 that need to be written out (no change)
numbers = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
alpha_numbers = [
    "zero (0)",
    "one (1)",
    "two (2)",
    "three (3)",
    "four (4)",
    "five (5)",
    "six (6)",
    "seven (7)",
    "eight (8)",
    "nine (9)",
]
alpha_numbers_cap = [
    "Zero (0)",
    "One (1)",
    "Two (2)",
    "Three (3)",
    "Four (4)",
    "Five (5)",
    "Six (6)",
    "Seven (7)",
    "Eight (8)",
    "Nine (9)",
]
numbers_df = pd.DataFrame(
    {
        "numbers": numbers,
        "alpha_numbers": alpha_numbers,
        "alpha_numbers_cap": alpha_numbers_cap,
    }
)

# Create an empty data frame to hold narratives
# narratives = pd.DataFrame(
#     columns=[
#         "Rule ID",
#         "Population Group",
#         "Summary",
#         "Analysis",
#         "Conclusion",
#     ]
# )
# TODO Change log for above create an empty data frame to hold narratives
# Create an empty DataFrame with 5 columns
narratives = pd.DataFrame(columns=range(5))


# Begin Iterations --------------------------------------------------------
# Iterate over Rule IDs, Population Groups, and Parameters
for x in ruleIDs:
    data_Rule = data[data["Rule ID"] == x]
    popGroups = data_Rule["Population Group"].value_counts().index.tolist()

    for pop in popGroups:
        data_Rule_Pop = data_Rule[data_Rule["Population Group"] == pop]
        params = data_Rule_Pop["Parameter"].value_counts().index.tolist()

        # Parse date range of alert generation for the rule
        date_range = data_Rule_Pop["Date Range"].iloc[0].split("-")

        for threshold in params:

            data_Rule_Pop_Parameter = data_Rule_Pop[
                data_Rule_Pop["Parameter"] == threshold
            ]

            # Summary Paragraph -----------------------------------------------------------------
            # Time frame of alerts that generated; if no alerts generated -> no analysis performed
            temp = data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0]
            date_range = data_Rule_Pop_Parameter["Date Range"].iloc[0].split("-")

            line_one = ""
            if temp == 0:
                line_one = f"No alerts generated in the Actimize UAT environment between {date_range[0]} and {date_range[1]}; therefore, no analysis was performed. The current thresholds are recommended to be maintained."
            elif temp > 0:
                line_one = f"Alerts generated in the Actimize UAT environment between {date_range[0]} and {date_range[1]} were extracted for review."

            # No. of rule breaks generated; wording reflects if there was sampling or data quality alerts present
            temp = data_Rule_Pop_Parameter["Num Alerts Sampled"].iloc[0]

            line_two = ""
            if temp == 0:
                pass
            elif (
                temp == 1
                and temp == data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0]
            ):
                line_two = f"{numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule break generated during the testing period, which was reviewed by the Bank for quality."
            elif (
                temp < 10
                and temp == data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0]
                and data_Rule_Pop_Parameter["Data Quality Alerts"].iloc[0] == 0
            ):
                line_two = f"{numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule breaks generated during the testing period, which were reviewed by the Bank for quality and used for analysis."
            elif (
                temp < 10
                and temp == data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0]
            ):
                line_two = f"{numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule breaks generated during the testing period, which were reviewed by the Bank for quality."
            elif (
                temp == data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0]
                and data_Rule_Pop_Parameter["Data Quality Alerts"].iloc[0] == 0
            ):
                line_two = f"{data_Rule_Pop_Parameter['Num Alerts Extracted'].iloc[0]} rule breaks generated during the testing period, which were reviewed by the Bank for quality and used for analysis."
            elif (
                temp == data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0]
                and data_Rule_Pop_Parameter["Data Quality Alerts"].iloc[0] != 0
            ):
                line_two = f"{data_Rule_Pop_Parameter['Num Alerts Extracted'].iloc[0]} rule breaks generated during the testing period, which were reviewed by the Bank for quality."
            elif (
                temp != data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0]
                and data_Rule_Pop_Parameter["Data Quality Alerts"].iloc[0] == 0
            ):
                line_two = f"{data_Rule_Pop_Parameter['Num Alerts Extracted'].iloc[0]:,} rule breaks generated during the testing period, which were subsequently sampled using the standard methodology. The {temp} sampled rule breaks were then reviewed by the Bank for quality and used for analysis."
            elif temp != data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0]:
                line_two = f"{data_Rule_Pop_Parameter['Num Alerts Extracted'].iloc[0]:,} rule breaks generated during the testing period, which were subsequently sampled using the standard methodology. The {temp} sampled rule breaks were then reviewed by the Bank for quality."

            # Data quality alerts identified, if any
            temp = data_Rule_Pop_Parameter["Data Quality Alerts"].iloc[0]

            line_three = ""
            if temp == 0:
                pass
            elif temp == 1:
                line_three = f"The Bank identified {numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers'].iloc[0]} Data Quality rule break that generated on ###INSERT DATA QUALITY RATIONALE###. As a result, this rule break was marked as Data Quality and excluded from analysis."
            elif temp < 10:
                line_three = f"The Bank identified {numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers'].iloc[0]} Data Quality rule breaks that generated on ###INSERT DATA QUALITY RATIONALE###. As a result, these rule breaks were marked as Data Quality and excluded from analysis."
            elif temp >= 10:
                line_three = f"The Bank identified {temp} Data Quality rule breaks that generated on ###INSERT DATA QUALITY RATIONALE###. As a result, these rule breaks were marked as Data Quality and excluded from analysis."

            # Reflects sampled rules used for analysis (excluding data quality)
            temp = (
                data_Rule_Pop_Parameter["Num Alerts Sampled"].iloc[0]
                - data_Rule_Pop_Parameter["Data Quality Alerts"].iloc[0]
            )

            line_four = ""
            if temp == 0 or data_Rule_Pop_Parameter["Data Quality Alerts"].iloc[0] == 0:
                pass
            elif (
                temp < 10
                and temp != data_Rule_Pop_Parameter["Num Alerts Sampled"].iloc[0]
            ):
                line_four = f"The remaining {numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers'].iloc[0]} sampled rule breaks were used for analysis."
            elif (
                temp >= 10
                and temp != data_Rule_Pop_Parameter["Num Alerts Sampled"].iloc[0]
            ):
                line_four = (
                    f"The remaining {temp} sampled rule breaks were used for analysis."
                )
            elif (
                temp < 10
                and data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] <= 100
            ):
                line_four = f"{numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule breaks were used for analysis."
            elif (
                temp >= 10
                and data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] <= 100
            ):
                line_four = f"{temp} rule breaks were used for analysis."
            elif temp < 10:
                line_four = f"{numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} sampled rule breaks were used for analysis."
            elif temp >= 10:
                line_four = f"{temp} sampled rule breaks were used for analysis."

            # Analysis Paragraph ----------------------------------------------------------------
            # Interrupt loop if parameter is not tunable
            is_tunable = data_Rule_Pop_Parameter["Is Tunable"].iloc[0]
            if is_tunable == "No":
                continue

            # Threshold tuned and value
            temp_lowered = data_Rule_Pop_Parameter["BTL Threshold"].iloc[0]

            if threshold in currencyF:
                temp_lowered_formatted = f"${temp_lowered:,.2f}"
            elif threshold in numberF:
                if temp_lowered < 10:
                    temp_lowered_formatted = numbers_df[
                        numbers_df["numbers"] == str(int(temp_lowered))
                    ]["alpha_numbers"].iloc[0]
                else:
                    temp_lowered_formatted = f"{temp_lowered:,}"
            elif threshold in percentF:
                temp_lowered_formatted = f"{temp_lowered:.2f}%"
            elif threshold in decimalF:
                temp_lowered_formatted = f"{temp_lowered:.2f}"
            else:
                temp_lowered_formatted = str(temp_lowered)

            temp_original = data_Rule_Pop_Parameter["Current Threshold"].iloc[0]

            if threshold in currencyF:
                temp_original_formatted = f"${temp_original:,.2f}"
            elif threshold in numberF:
                if temp_original < 10:
                    temp_original_formatted = numbers_df[
                        numbers_df["numbers"] == str(int(temp_original))
                    ]["alpha_numbers"].iloc[0]
                else:
                    temp_original_formatted = f"{temp_original:,}"
            elif threshold in percentF:
                temp_original_formatted = f"{temp_original:.2f}%"
            elif threshold in decimalF:
                temp_original_formatted = f"{temp_original:.2f}"
            else:
                temp_original_formatted = str(temp_original)

            line_five = ""
            if data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] == 0:
                pass
            elif data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] > 0:
                line_five = f"Production below-the-line calibration was conducted on the {threshold} threshold, which was lowered from the production value of {temp_original_formatted} to the below-the-line testing value of {temp_lowered_formatted}."

            # Values that rule breaks generated at
            temp = (
                data_Rule_Pop_Parameter["Max Val"].iloc[0]
                - data_Rule_Pop_Parameter["Min Val"].iloc[0]
            )

            if threshold in currencyF:
                val_formatted = (
                    f"${data_Rule_Pop_Parameter['Min Val'].iloc[0]:,.2f}",
                    f"${data_Rule_Pop_Parameter['Max Val'].iloc[0]:,.2f}",
                )
            elif threshold in numberF:
                if np.isnan(data_Rule_Pop_Parameter["Max Val"].iloc[0]):
                    val_formatted = ("0", "0")
                elif data_Rule_Pop_Parameter["Max Val"].iloc[0] < 10:
                    val_formatted = (
                        numbers_df[
                            numbers_df["numbers"]
                            == str(int(data_Rule_Pop_Parameter["Min Val"].iloc[0]))
                        ]["alpha_numbers"].iloc[0],
                        numbers_df[
                            numbers_df["numbers"]
                            == str(int(data_Rule_Pop_Parameter["Max Val"].iloc[0]))
                        ]["alpha_numbers"].iloc[0],
                    )
                elif (
                    data_Rule_Pop_Parameter["Max Val"].iloc[0] >= 10
                    and data_Rule_Pop_Parameter["Min Val"].iloc[0] < 10
                ):
                    val_formatted = (
                        numbers_df[
                            numbers_df["numbers"]
                            == str(int(data_Rule_Pop_Parameter["Min Val"].iloc[0]))
                        ]["alpha_numbers"].iloc[0],
                        f"{data_Rule_Pop_Parameter['Max Val'].iloc[0]:,}",
                    )
                else:
                    val_formatted = (
                        f"{data_Rule_Pop_Parameter['Min Val'].iloc[0]:,}",
                        f"{data_Rule_Pop_Parameter['Max Val'].iloc[0]:,}",
                    )
            elif threshold in percentF:
                val_formatted = (
                    f"{data_Rule_Pop_Parameter['Min Val'].iloc[0]:.2f}%",
                    f"{data_Rule_Pop_Parameter['Max Val'].iloc[0]:.2f}%",
                )
            elif threshold in decimalF:
                val_formatted = (
                    f"{data_Rule_Pop_Parameter['Min Val'].iloc[0]:.2f}",
                    f"{data_Rule_Pop_Parameter['Max Val'].iloc[0]:.2f}",
                )
            else:
                val_formatted = (
                    str(data_Rule_Pop_Parameter["Min Val"].iloc[0]),
                    str(data_Rule_Pop_Parameter["Max Val"].iloc[0]),
                )

            line_six = ""
            if data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] == 0:
                pass
            elif temp == 0:
                line_six = f"Rule breaks were generated solely at a value of {val_formatted[1]}."
            elif temp != 0:
                line_six = f"Rule breaks were generated for values ranging between {val_formatted[0]} and {val_formatted[1]}."

                # No. of interesting rule breaks in sample population
            temp = (
                data_Rule_Pop_Parameter["Num Alerts Sampled"].iloc[0]
                - data_Rule_Pop_Parameter["Data Quality Alerts"].iloc[0]
            )
            temp2 = data_Rule_Pop_Parameter["Interesting Alerts"].iloc[0]

            line_seven = ""
            if data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] == 0:
                pass
            elif temp2 == 0 and temp == 1:
                line_seven = f"Analysis revealed {numbers_df[numbers_df['numbers'] == str(temp2)]['alpha_numbers'].iloc[0]} interesting rule breaks in the population of {numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule break."
            elif temp2 == 0 and temp < 10:
                line_seven = f"Analysis revealed {numbers_df[numbers_df['numbers'] == str(temp2)]['alpha_numbers'].iloc[0]} interesting rule breaks in the population of {numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule breaks."
            elif temp2 == 0 and temp >= 10:
                line_seven = f"Analysis revealed {numbers_df[numbers_df['numbers'] == str(temp2)]['alpha_numbers'].iloc[0]} interesting rule breaks in the population of {temp} rule breaks."
            elif temp2 == 1 and temp == 1:
                line_seven = f"Analysis revealed {numbers_df[numbers_df['numbers'] == str(temp2)]['alpha_numbers'].iloc[0]} interesting rule break in the population of {numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule break."
            elif temp2 == 1 and temp < 10:
                line_seven = f"Analysis revealed {numbers_df[numbers_df['numbers'] == str(temp2)]['alpha_numbers'].iloc[0]} interesting rule break in the population of {numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule breaks."
            elif temp2 == 1 and temp >= 10:
                line_seven = f"Analysis revealed {numbers_df[numbers_df['numbers'] == str(temp2)]['alpha_numbers'].iloc[0]} interesting rule break in the population of {temp} rule breaks."
            elif temp2 < 10 and temp < 10:
                line_seven = f"Analysis revealed {numbers_df[numbers_df['numbers'] == str(temp2)]['alpha_numbers'].iloc[0]} interesting rule breaks in the population of {numbers_df[numbers_df['numbers'] == str(temp)]['alpha_numbers_cap'].iloc[0]} rule breaks."
            elif temp2 < 10 and temp >= 10:
                line_seven = f"Analysis revealed {numbers_df[numbers_df['numbers'] == str(temp2)]['alpha_numbers'].iloc[0]} interesting rule breaks in the population of {temp} rule breaks."
            elif temp2 >= 10:
                line_seven = f"Analysis revealed {temp2} interesting rule breaks in the population of {temp} rule breaks."

            # Placeholder for recommendation rationale
            line_eight = ""
            if data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] != 0:
                line_eight = "###INSERT TUNING DECISION###"

            # Tuning recommendation
            temp = (
                data_Rule_Pop_Parameter["Current Threshold"].iloc[0],
                data_Rule_Pop_Parameter["Recommended Threshold"].iloc[0],
            )

            if threshold in currencyF:
                temp_formatted = (f"${temp[0]:,.2f}", f"${temp[1]:,.2f}")
            elif threshold in numberF:
                if temp[0] < 10 and temp[1] < 10:
                    temp_formatted = (
                        numbers_df[numbers_df["numbers"] == str(int(temp[0]))][
                            "alpha_numbers"
                        ].iloc[0],
                        numbers_df[numbers_df["numbers"] == str(int(temp[1]))][
                            "alpha_numbers"
                        ].iloc[0],
                    )
                elif temp[0] < 10 and temp[1] >= 10:
                    temp_formatted = (
                        numbers_df[numbers_df["numbers"] == str(int(temp[0]))][
                            "alpha_numbers"
                        ].iloc[0],
                        f"{temp[1]:,}",
                    )
                else:
                    temp_formatted = (f"{temp[0]:,}", f"{temp[1]:,}")
            elif threshold in percentF:
                temp_formatted = (f"{temp[0]:.2f}%", f"{temp[1]:.2f}%")
            elif threshold in decimalF:
                temp_formatted = (f"{temp[0]:.2f}", f"{temp[1]:.2f}")
            else:
                temp_formatted = (str(temp[0]), str(temp[1]))

            line_nine = ""
            if data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] == 0:
                pass
            elif (
                data_Rule_Pop_Parameter["Current Threshold"].iloc[0]
                == data_Rule_Pop_Parameter["Recommended Threshold"].iloc[0]
            ):
                line_nine = f"Therefore, it is recommended to maintain the {threshold} threshold at {temp_formatted[0]}."
            elif (
                data_Rule_Pop_Parameter["Current Threshold"].iloc[0]
                != data_Rule_Pop_Parameter["Recommended Threshold"].iloc[0]
            ):
                line_nine = f"Therefore, it is recommended to lower the {threshold} threshold from {temp_formatted[0]} to {temp_formatted[1]}."

            # Change in effectiveness
            line_ten = ""
            if (
                data_Rule_Pop_Parameter["Num Alerts Extracted"].iloc[0] == 0
                or data_Rule_Pop_Parameter["Current Threshold"].iloc[0]
                == data_Rule_Pop_Parameter["Recommended Threshold"].iloc[0]
            ):
                pass
            elif (
                data_Rule_Pop_Parameter["Current Threshold"].iloc[0]
                != data_Rule_Pop_Parameter["Recommended Threshold"].iloc[0]
            ):
                line_ten = f"At the recommended threshold, the effectiveness of the delta population is {data_Rule_Pop_Parameter['Prop Effectiveness'].iloc[0]:.2f}%."

            # ! conclusion

            # Consolidate Narratives
            # Add lines to the narratives dataframe
            new_row = {
                "Rule ID": x,
                "Rule Name": data_Rule_Pop_Parameter["Rule Name"].iloc[0],
                "Population Group": pop,
                "Parameter": threshold,
                "Summary": " ".join(
                    [line_one, line_two, line_three, line_four]
                ).strip(),
                "Analysis": " ".join(
                    [line_five, line_six, line_seven, line_eight, line_nine, line_ten]
                ).strip(),
                "Conclusion": "",
            }

            narratives = pd.concat(
                [narratives, pd.DataFrame(new_row, index=[0])], ignore_index=True
            )


# Export narratives to CSV
narratives.to_csv(
    os.path.join(fp, "Actimize Pre-Production Report Narratives.csv"), index=False
)

# Export Narratives to Word ----------------------------------------

# Initialize output file
output = os.path.join(fp, "output/CNB Report Narratives - BTL new_512024_345pm.docx")

doc = docx.Document()

# Create section named 'Analysis'
heading = doc.add_heading("Below-the-Line Analysis", level=1)

# Filter narratives to rule level
for x in natsorted(ruleIDs):
    narratives_Rule = narratives[narratives["Rule ID"] == x]
    # Add Rule ID header to doc
    heading = doc.add_heading(x, level=2)

    # Add threshold decisions table
    paragraph = doc.add_paragraph("Summary of Threshold Decisions")

    threshold_decisions = data[
        [
            "Rule ID",
            "Population Group",
            "Parameter",
            "Current Threshold",
            "BTL Threshold",
            "Recommended Threshold",
        ]
    ]
    threshold_decisions = threshold_decisions[threshold_decisions["Rule ID"] == x]
    threshold_decisions = threshold_decisions[
        [
            "Population Group",
            "Parameter",
            "Current Threshold",
            "BTL Threshold",
            "Recommended Threshold",
        ]
    ]
    threshold_decisions = threshold_decisions.sort_values(
        by=["Population Group", "Parameter"]
    )
    threshold_decisions = threshold_decisions.rename(
        columns={"Population Group": "Population"}
    )

    # Format thresholds in table to display with proper units
    for row in threshold_decisions.index:
        temp_param = threshold_decisions.at[row, "Parameter"]
        temp_values = (
            threshold_decisions.loc[
                row, ["Current Threshold", "BTL Threshold", "Recommended Threshold"]
            ]
            .astype(str)
            .values
        )

        if temp_param in currencyF:
            temp_values_formatted = [
                f"${float(value.replace(',', '')):,.2f}" for value in temp_values
            ]
        elif temp_param in numberF:
            temp_values_formatted = [f"{float(value):,.0f}" for value in temp_values]
        elif temp_param in percentF:
            temp_values_formatted = [
                f"{float(value.strip('%'))/100:.2%}" for value in temp_values
            ]
        elif temp_param in decimalF:
            temp_values_formatted = [f"{float(value):.2f}" for value in temp_values]
        else:
            temp_values_formatted = [str(value) for value in temp_values]

        threshold_decisions.at[row, "Current Threshold"] = temp_values_formatted[0]
        threshold_decisions.at[row, "BTL Threshold"] = temp_values_formatted[1]
        threshold_decisions.at[row, "Recommended Threshold"] = temp_values_formatted[2]

    table = doc.add_table(rows=1, cols=len(threshold_decisions.columns))
    hdr_cells = table.rows[0].cells
    for i, col_name in enumerate(threshold_decisions.columns):
        hdr_cells[i].text = col_name

    for _, row in threshold_decisions.iterrows():
        row_cells = table.add_row().cells
        for i, col_value in enumerate(row):
            row_cells[i].text = str(col_value)

    doc.add_paragraph("")

    # Filter to Pop Group
    popGroups = narratives_Rule["Population Group"].value_counts().index.tolist()

    for pop in popGroups:
        narratives_Rule_Pop = narratives_Rule[
            narratives_Rule["Population Group"] == pop
        ]

        # Add header for population group
        heading = doc.add_heading(pop, level=3)

        # Add 'Threshold Recommendation' header to doc
        heading = doc.add_heading("Threshold Recommendation", level=4)

        # Print summary paragraph
        paragraph = doc.add_paragraph(narratives_Rule_Pop["Summary"].iloc[0])

        # Skip remaining headers/paragraphs if no alerts generated
        if narratives_Rule_Pop["Summary"].iloc[0].startswith("No alerts"):
            continue

        # Filter to each parameter within pop group
        params = narratives_Rule_Pop["Parameter"].value_counts().index.tolist()

        for param in params:
            narratives_Rule_Pop_Parameter = narratives_Rule_Pop[
                narratives_Rule_Pop["Parameter"] == param
            ]

            # Add parameter header
            heading = doc.add_heading(param, level=5)

            # Add analysis paragraphs for each parameter
            paragraph = doc.add_paragraph(
                narratives_Rule_Pop_Parameter["Analysis"].iloc[0]
            )

            # Get the original and lowered threshold values for the current parameter
            temp_original = data_Rule_Pop_Parameter["Current Threshold"].iloc[0]
            temp_lowered = data_Rule_Pop_Parameter["Recommended Threshold"].iloc[0]

            if param in currencyF:
                temp_original_formatted = f"${temp_original:,.2f}"
                temp_lowered_formatted = f"${temp_lowered:,.2f}"
            elif param in numberF:
                if temp_original < 10:
                    temp_original_formatted = numbers_df[
                        numbers_df["numbers"] == str(int(temp_original))
                    ]["alpha_numbers"].iloc[0]
                else:
                    temp_original_formatted = f"{temp_original:,}"

                if temp_lowered < 10:
                    temp_lowered_formatted = numbers_df[
                        numbers_df["numbers"] == str(int(temp_lowered))
                    ]["alpha_numbers"].iloc[0]
                else:
                    temp_lowered_formatted = f"{temp_lowered:,}"
            elif param in percentF:
                temp_original_formatted = f"{temp_original:.2f}%"
                temp_lowered_formatted = f"{temp_lowered:.2f}%"
            elif param in decimalF:
                temp_original_formatted = f"{temp_original:.2f}"
                temp_lowered_formatted = f"{temp_lowered:.2f}"
            else:
                temp_original_formatted = str(temp_original)
                temp_lowered_formatted = str(temp_lowered)

            # Add conclusion paragraph for each parameter
            conclusion = f"Based on the analysis, it is recommended to lower the {param} threshold from {temp_original_formatted} to {temp_lowered_formatted}."
            # paragraph = doc.add_paragraph(conclusion)

        # Add header for conclusion
        heading = doc.add_heading("Conclusion", level=4)
        # Print conclusion paragraph
        conclusion = narratives_Rule_Pop["Conclusion"].iloc[0]
        paragraph = doc.add_paragraph(conclusion)

doc.save(output)
